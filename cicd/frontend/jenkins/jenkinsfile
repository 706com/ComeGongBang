pipeline {
    agent any
    tools {
        nodejs 'NodeJS'
    }
    stages {
      stage('git clone') {
			    steps {
			        git branch: 'deployment/front', url: 'https://github.com/beyond-sw-camp/be06-fin-SYNergy-ComeGongBang.git'
			    }
			}
      stage('npm install & build') {
        steps {
          dir('frontend') {
            sh "npm install"
            sh "npm run build"
          }
        }
      }
      stage('Docker Push') {
        steps {
          script {
            // Docker build
            sh "docker build -f cicd/frontend/docker/Dockerfile --tag ${DOCKER_IMAGE}:1.${env.BUILD_NUMBER} ."
            //Docker Login
            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin"
            //Docker imageHub push
            sh "docker push ${DOCKER_IMAGE}:1.${env.BUILD_NUMBER}"
          }
        }
      }
      // SSH 전송
      stage('SSH transfer') {
        steps {
            script {
                def isOdd = (env.BUILD_NUMBER.toInteger() % 2 != 0)
                def deploymentFileName = isOdd ? 'deployment-blue' : 'deployment-green'
                def otherDeploymentName = isOdd ? 'deployment-green' : 'deployment-blue'
                def newSelector = isOdd ? 'blue' : 'green'
                def serviceName = 'frontend-svc'
                // SSH 전송 플러그인 사용
                sshPublisher(
                    // 오류 발생 시 진행을 멈춤
                    continueOnError: false,
                    // 오류 발생 시 파이프라인을 실패시킴
                    failOnError: true,
                    // 전송자 목록
                    publishers: [
                        // SSH 전송 설명
                        sshPublisherDesc(
                            // SSH 서버 설정 이름 지정 ( master 노드 )
                            configName: "kube-master",
                            // 자세한 출력 모드 활성화
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    // 전송할 파일 지정
                                    sourceFiles: "cicd/frontend/kubernetes/${deploymentFileName}.yml",
                                    // 원격 디렉토리 지정 ( 원격서버로 파일을 전송할 위치 )
                                    remoteDirectory: "/home/test/",
                                    // 전송 후 야멜 파일의 VERSION을 파이프라인 빌드 숫자로 변경
                                    execCommand: """
                                    sed -i "s/latest/1.${env.BUILD_NUMBER}/g" /home/test/cicd/frontend/kubernetes/${deploymentFileName}.yml
                                    kubectl apply -f /home/test/cicd/frontend/kubernetes/${deploymentFileName}.yml
                                    # kubectl scale --replicas=2 -f /home/test/cicd/frontend/${deploymentFileName}.yml
                                    # kubectl apply -f /home/test/cicd/frontend/${deploymentFileName}.yml

                                    # 새로운 파드가 준비 상태가 될 때까지 대기
                                    kubectl rollout status deployment/frontend-${deploymentFileName} --timeout=60s

                                    kubectl patch service ${serviceName} -p '{"spec":{"selector":{"deployment":"${newSelector}","type":"frontend"}}}'


                                    # 전환 후 일정 시간 대기
                                    sleep 10

                                    kubectl scale --replicas=0 -f /home/test/cicd/frontend/kubernetes/${otherDeploymentName}.yml
                                    """
                                )
                            ]
                        )
                    ]
                )
            }
        }
      }
    }
    post {
        success {
    	    // credentialsId - 아까 설정한 웹훅 ID | variable - 변수명(마음대로 설정)
    	    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]){
    			    discordSend description: """
                    제목 : ${currentBuild.displayName}
                    결과 : ${currentBuild.result}
                    실행 시간 : ${currentBuild.duration / 1000}s
                    """,
                    link: env.BUILD_URL, result: currentBuild.currentResult,
                    title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공",
                    webhookURL: "$DISCORD"
    			}
    		}
    	failure {
    	    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                    discordSend description: """
                    제목 : ${currentBuild.displayName}
                    결과 : ${currentBuild.result}
                    실행 시간 : ${currentBuild.duration / 1000}s
                    """,
                    link: env.BUILD_URL, result: currentBuild.currentResult,
                    title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패",
                    webhookURL: "$DISCORD"
    			}
    		}
    }
}